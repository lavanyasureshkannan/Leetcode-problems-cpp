/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

**************************************ITERATIVE****************************************************

class Solution 
{
public:
    vector<int> postorder(Node* root)
{
    vector<int> ans;
    stack<Node*> st;
    // base case
    if(root == NULL) return ans;
    st.push(root);
    while(!st.empty())
    {
        Node* curr = st.top();
        st.pop();
        ans.push_back(curr->val);
        int n = curr->children.size();
        for(int i = 0; i<n; i++)
        {
            st.push(curr->children[i]);
        }
    }
    reverse(ans.begin(),ans.end());
    return ans;

}
};

// TC: O(N) ->visiting all the nodes once
// SC: O(N) -> stack


******************************************RECURRSIVE******************************************************

class Solution
{
public:
    vector<int> ans;
    
    vector<int> postorder(Node* root)
    {
        
        if(root == NULL) return ans;
        for(auto i: root->children)
        {
            postorder(i);
            
        }
        ans.push_back(root->val);

        return ans;

    }
} ;

// TC: O(N) -> visiting all the nodes once
// SC: O(N) -> answer

