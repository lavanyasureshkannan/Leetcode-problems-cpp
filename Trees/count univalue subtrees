

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
    public:
    int total_count = 0;

    // dfs bottom up approach
    bool is_unival(TreeNode* root)
    {
        // base case 1
        if(root == NULL) return 0;
        // base case 2 -> considering right and left values as subtree
        if(root->left == NULL && root->right == NULL)
        {
            total_count ++;
            return true;
        }
        bool istrue = true;
        // check if the children are unvalued
        if(root->left != NULL)
        {
            istrue = is_unival(root->left) && istrue && root->left->val == root->val;
        }
        if(root->right != NULL)
        {
            istrue = is_unival(root->right) && istrue && root->right->val == root->val;
        }

        // return is the univalue tree exits here
        if(!istrue) return false;
        total_count++;
        return true;
    }
        
    
    int countUnivalSubtrees(TreeNode* root) 
    {
        if(root == NULL) return 0;
        // recurrsive call to return the count
        is_unival(root);
        return total_count;
    }
    
};


// TC O(N) ->  O(1) time for each node given in the tree
// SC O(H) -> height of the tree

