/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution 
{
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int> result;
        stack<TreeNode* >st;

        // base case
        if(!root) return {};
        st.push(root);
        // putting the values inside stack on the following order
        // root->left->right => preorder traversal
        while(!st.empty())
        {
            TreeNode* curr = st.top();
            st.pop();
            result.push_back(curr->val);
            if(curr->right)
            {
                st.push(curr->right);
            }
            if(curr->left)
            {
                st.push(curr->left);
            }
        }
        return result;

    }
};

// TIME COMPLEXITY O(N) N -> number of node
// SPACE COMPLEXITY O(N) -> depending on the tree structure




****************************************************************************************************************************************************

// ITERATIVE SEARCH
void preorder(Node* root, vector<int>& answer)
{
    if(root == NULL) return;
    answer.push_back(root->m_value);
    preorder(root->left, answer);
    preorder(root->right, answer);
}
vector<int> preorder_iter(Node* root)
{
    vector<int> answer;
    preorder(root, answer);
    display_array(answer);
    return answer;
}

// TIME COMPLEXITY O(N)
// SPACE COMPLEXITY O(N)
