/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// APPROACH1 - ITERATIVE APPROACH

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // base case for null
        if(l1 == NULL){
            return l2;
        }
        if(l2 == NULL){
            return l1;
        }
        
        // create a dummy node 
        ListNode* dummy = new ListNode(0);
        ListNode* current_node = dummy;
        
        // while both nodes are not null
        while(l1 != NULL && l2 != NULL){
            if(l1->val <= l2->val){
                current_node->next = l1;
                l1 = l1->next;
            }
            else{
                current_node->next = l2;
                l2 = l2->next;
            }
        
            current_node = current_node->next;
        }
        // remaining nodes
        if(l1 != NULL){
            current_node->next = l1;
            l1 = l1->next;
        }
        if(l2 != NULL){
            current_node->next = l2;
            l2 = l2->next;
        }
        return dummy->next;
        
        
    }
};


// TIME COMPLEXITY O(n + m) --> l1 and l2 increments on each loop iterations
// SPACE COMPLEXITY O(1)

*****************************************************************************************************************************************************

// APPROACH 2 - RECURRSIVE

class Solution 
{
public:
     ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)
     {
         // basecase
         if(l1 == NULL) return l2;
         if(l2 == NULL) return l1;
         
         // compare the heads of l1 and l2
         if(l1->val < l2->val)
         {
             l1->next = mergeTwoLists(l1->next, l2);
             return l1;
         }
         else
         {
             l2->next = mergeTwoLists(l1, l2->next);
             return l2;
         }
 
     }
    
};


//TIME COMPLEXITY O(m + n) ---> m--> nodes in l1 and n --> nodes in l2
// SPACE COMPLEXITY O(m + n)
