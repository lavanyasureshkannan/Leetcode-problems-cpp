class Solution {
public:
    int maxArea(vector<int>& height) {
        // initialize the max value
        int maxi =0;
        for(int i =0; i< height.size(); i++)
        {
            for(int j =i+1; j<height.size(); j++)
            {
                int current_area = min(height [i] , height[j]) * (j-i);
                maxi = max(maxi, current_area);
            }
        }
        return maxi;
    }
    
};


//Time : O(N^2)
//Space: O(1)


// optimized approach
class Solution {
public:
    int maxArea(vector<int>& height) {
        /// intilaize max
        int maxi = 0;
        int left = 0;
        int right = height.size() - 1;
        while(left <right)
        {
            // current area
            int current_area = min(height[left], height[right]) * (right - left);
            maxi =  max(maxi, current_area);
            if(height[left] < height[right])
            {
                left ++;
            }
            else
            {
                right --;
            }
        }
        return maxi;
        
    }
};

//Time O(n)
// space O(1)
